import 'package:flutter/material.dart';class Fade extends StatefulWidget {  const Fade({Key key, @required this.child, @required this.visible, this.repeat = true, Duration duration})      : duration = duration ?? const Duration(milliseconds: 200),        super(key: key);  final Widget child;  final bool visible;  final Duration duration;  final bool repeat;  @override  _FadeState createState() => _FadeState();}class _FadeState extends State<Fade> with TickerProviderStateMixin {  AnimationController _fadeAnimationController;  AnimationController _animationController;  Animation<double> _fadeInFadeOut;  @override  void initState() {    super.initState();    _fadeAnimationController = AnimationController(      vsync: this,      duration: const Duration(seconds: 2),    );    _fadeInFadeOut = Tween<double>(      begin: 0.0,      end: 0.9,    ).animate(_fadeAnimationController);    if(widget.repeat) {      _fadeAnimationController.addStatusListener( (status) {        if (status == AnimationStatus.completed) {          _fadeAnimationController.reverse( );        } else if (status == AnimationStatus.dismissed) {          _fadeAnimationController.forward( );        }      } );    }    _fadeAnimationController.forward();  }  @override  void didUpdateWidget(Fade oldWidget) {    super.didUpdateWidget(oldWidget);    if (!oldWidget.visible && widget.visible) {      _animationController.forward();    } else if (oldWidget.visible && !widget.visible) {      _animationController.reverse();    }  }  @override  Widget build(BuildContext context) {    return FadeTransition(      opacity: _fadeInFadeOut,      child: widget.child,    );  }  @override  void dispose() {    _animationController?.dispose();    _fadeAnimationController?.dispose();    super.dispose();  }}